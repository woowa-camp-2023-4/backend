import groovy.json.JsonSlurper
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.junit.Test
import org.junit.runner.RunWith
import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse

import static net.grinder.script.Grinder.grinder

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

/**
 * A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test1
    public static GTest test2
    public static GTest test3
    public static GTest test4
    public static GTest test5
    public static GTest test6


    public static HTTPRequest request
    public static Map<String, String> headers = [:]
    public static String SERVER_URL = "http://43.200.7.192:8080"
    public static final int MAX_PRODUCT_ID = 10000
    public static final int TOTAL_USER = 260000

    public Random random = new Random()
    private String accessToken

    @BeforeProcess
    static void beforeProcess() {
        HTTPRequestControl.setConnectionTimeout(300000)
        test1 = new GTest(1, "메인_조회")
        test2 = new GTest(2, "상품_상세_조회")
        test3 = new GTest(3, "카트_담기")
        test4 = new GTest(4, "주문_전체_내역_조회")
        test5 = new GTest(5, "단건_주문")
        test6 = new GTest(6, "카트_주문")

        request = new HTTPRequest()


        // Set header data
        headers.put("Content-Type", "application/json")
        grinder.logger.info("before process.")
    }

    @BeforeThread
    void beforeThread() {
        test1.record(this, "메인_조회")
        test2.record(this, "상품_상세_조회")
        test3.record(this, "카트_담기")
        test4.record(this, "주문_전체_내역_조회")
        test5.record(this, "단건_주문")
        test6.record(this, "카트_주문")

        login()

        grinder.statistics.delayReports = true
        grinder.logger.info("before thread.")
    }

    String login() {
        String email = "test" + random.nextInt(TOTAL_USER) + "@test.com"
        String body = "{\n   \"email\" : \"" + email + "\",\n   \"password\" : \"test1234\"\n}"
        HTTPResponse response = request.POST(SERVER_URL + "/auth/login", body.getBytes())
        def jsonResponse = new JsonSlurper().parseText(response.getBodyText())
        accessToken = jsonResponse.accessToken
        checkErrorLog(response)

        headers["Authorization"] = "Bearer " + accessToken
        request.setHeaders(headers)

        return accessToken
    }

    @Test
    void test() {
        scenarioMove()
    }

    private void scenarioMove() {

        int dice = random.nextInt(429)
        grinder.logger.info("dice : " + dice)

        switch (dice) {
            case 1..200:
                // 1. 메인 조회
                메인_조회()
                break
            case 201..400:
                // 2. 상품 상세 조회
                상품_상세_조회(getWeightedRandomProductId())
                break
            case 401..412:
                // 3. 단건 주문
                카트_담기(getWeightedRandomProductId())
                break
            case 413..422:
                // 4. 카트 담기
                주문_전체_내역_조회()
                break
            case 423:
                // 5. 카트 주문
                단건_주문(getWeightedRandomProductId())
                break
            case 424..429:
                // 6. 주문 전체 내역 조회
                카트_주문(getWeightedRandomProductId(), getWeightedRandomProductId(), getWeightedRandomProductId())
                break
        }
    }

    int getWeightedRandomProductId() {

        int middle = MAX_PRODUCT_ID / 5
        // 8/2 확률로 2/8 프로덕트 아이디 호출
        if (random.nextInt(5) == 1) {
            return random.nextInt(MAX_PRODUCT_ID - middle) + middle
        }

        return random.nextInt((int) (MAX_PRODUCT_ID / 5)) - 1
    }

    void 메인_조회() {
        HTTPResponse response = request.GET(SERVER_URL + "/products/rank")
        checkErrorLog(response)
    }

    void 상품_상세_조회(Long productId) {
        HTTPResponse response = request.GET(SERVER_URL + "/products/" + productId)
        checkErrorLog(response)
    }

    void 단건_주문(Long productId) {
        String body = "[{\n \"productId\" : " + productId + " ,\n  \"quantity\" : 1 \n}]"
        HTTPResponse preOrderResponse = request.POST(SERVER_URL + "/orders", body.getBytes())

        주문_결제_요청(new JsonSlurper().parseText(preOrderResponse.getBodyText()).id)
        checkErrorLog(preOrderResponse)
    }

    void 카트_주문(Long productId1, Long productId2, Long productId3) {
        카트_담기(productId1)
        카트_담기(productId2)
        카트_담기(productId3)
        HTTPResponse response = 카트_주문_요청(productId1, productId2, productId3)
        주문_결제_요청(new JsonSlurper().parseText(response.getBodyText()).id)
    }

    HTTPResponse 카트_주문_요청(Long productId1, Long productId2, Long productId3) {
        String body = "[{\n" +
                "        \"productId\": " + productId1 + ",\n" +
                "        \"quantity\": 3\n" +
                "    },\n" +
                "    {\n" +
                "        \"productId\": " + productId2 + ",\n" +
                "        \"quantity\": 3\n" +
                "    },\n" +
                "    {\n" +
                "        \"productId\": " + productId3 + ",\n" +
                "        \"quantity\": 3\n" +
                "    }]"
        HTTPResponse response = request.POST(SERVER_URL + "/orders", body.getBytes())
        checkErrorLog(response)

        return response
    }

    void 카트_담기(Long productId) {
        String cartItemBody = "{\n" +
                "  \"productId\" : " + productId + ",\n" +
                "  \"quantity\" : 3\n" +
                "}"
        HTTPResponse response = request.POST(SERVER_URL + "/cart-items", cartItemBody.getBytes())

        checkErrorLog(response)
    }

    void 주문_결제_요청(Long orderId) {
        String orderPayBody = "{\n" +
                "  \"paymentKey\" : \"paymentKey\"\n" +
                "}"

        HTTPResponse orderPayResponse = request.POST(SERVER_URL + "/orders/" + orderId + "/pay", orderPayBody.getBytes())
        checkErrorLog(orderPayResponse)
    }

    String 카트_조회() {
        HTTPResponse response = request.GET(SERVER_URL + "/cart-items")
        checkErrorLog(response)
        return response.bodyText
    }

    String 주문_전체_내역_조회() {
        HTTPResponse response = request.GET(SERVER_URL + "/orders")
        checkErrorLog(response)
    }

    void checkErrorLog(HTTPResponse response) {
        if (response.statusCode != 200 || response.statusCode != 201) {
            grinder.logger.error("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        }
    }
}
